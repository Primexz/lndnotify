log_level: "info"  # Log level: panic, fatal, error, warn, info, debug, trace

# LND connection settings
lnd:
  host: "localhost"
  port: 10009
  tls_cert_path: "~/.lnd/tls.cert"
  macaroon_path: "~/.lnd/data/chain/bitcoin/mainnet/readonly.macaroon"

# Notification settings
notifications:
  providers:
    - url: "discord://token@channel?SplitLines=false"  # Discord webhook URL
      name: "main-discord"
  templates:
    backup_multi_event: |-
      ‚ùóÔ∏è Channel backup received for {{.NumChanPoints}} channels

      Channel Points:
      {{range .ChanPoints}}- {{.}}
      {{end}}
      Filename: {{.Filename}}
      SHA256: {{.Sha256Sum}}
    channel_close_event: |-
      üîí Channel closed with {{.PeerAlias}}
      Capacity {{.Capacity}} sats
      Settled balance {{.SettledBalance}} sats

      Channel Point: {{.ChannelPoint}}
      Close Type: {{if eq .CloseType 0}}ü§ù Cooperatively {{if .CloseInitiator}}Local{{else}}Remote{{end}}{{else if eq .CloseType 1}}üî¥ Force Local{{else if eq .CloseType 2}}üî¥ Force Remote{{else if eq .CloseType 3}}üö® Breach{{else}}üíÄ Other{{end}}
    channel_closing_event: |-
      ‚è≥ Closing channel with {{.PeerAlias}}
      Capacity {{.Capacity}} sats
      Limbo: {{.LimboBalance}} sats

      Closing TxID: {{.ClosingTxid}}
      Raw TX: {{.ClosingTxHex}}
    channel_open_event: |-
      üöÄ Channel opened with {{.PeerAlias}}
      Capacity {{.Capacity}} sats"
    channel_opening_event: "{{if .Initiator}}‚è≥ Opening new {{.Capacity}} sats channel to {{.PeerAlias}}{{else}}‚è≥ Accepting new {{.Capacity}} sats channel from {{.PeerAlias}}{{end}}"
    failed_htlc_event: |-
      ‚ùå Failed HTLC of {{.Amount}} sats
      {{.InChanAlias}} -> {{.OutChanAlias}}
      Reason: {{.WireFailure}} ({{.FailureDetail}})
      Actual Outbound: {{.OutChanLiquidity}} sats
      Missed Fee: {{.MissedFee}} sats
    forward_event: |-
      üí∞ Forwarded {{.Amount}} sats
      {{.PeerAliasIn}} -> {{.PeerAliasOut}}
      Earned {{.Fee}} sats ({{.FeeRate}} ppm)
    invoice_settled_event: "üíµ Invoice settled: {{or .Memo \"No Memo\"}} for {{.Value}} sats"
    keysend_event: |-
      üì® Keysend received:

      {{.Msg}}

      Channel In: {{.InChanAlias}} ({{.InChanId}})
    payment_succeeded_event: |-
      ‚ö°Ô∏è Payment: {{.Amount}} sats (fee: {{.Fee}}, {{.FeeRate}} ppm) to {{.Receiver}}{{if .Memo}} - {{.Memo}}{{end}}{{range .HtlcInfo}}
      Route: {{range $i, $hop := .HopInfo}}{{if $i}} -> {{end}}{{$hop.Alias}} ({{$hop.FeeRate}} ppm){{end}}{{end}}
      Hash: {{.PaymentHash}}
    peer_offline_event: "{{if .PeerAlias}}‚ö†Ô∏è Peer {{.PeerAlias}} ({{.PeerPubkeyShort}}) went offline{{else}}‚ö†Ô∏è Peer {{.PeerPubKey}} went offline{{end}}"
    peer_online_event: "{{if .PeerAlias}}‚úÖ Peer {{.PeerAlias}} ({{.PeerPubkeyShort}}) is online{{else}}‚úÖ Peer {{.PeerPubKey}} is online{{end}}"
    rebalancing_succeeded_event: |-
      {{range .HtlcInfo}}‚òØÔ∏è Rebalanced {{.Amount}} sats {{.FirstHop}} ‚Üí {{.PenultHop}}. Fee: {{.Fee}} sats ({{.FeeRate}} ppm), Route: {{range $i, $hop := .HopInfo}}{{if $i}} -> {{end}}{{$hop.Alias}} ({{$hop.FeeRate}} ppm){{end}}

      {{end}}
    on_chain_mempool_event: |-
      üîó Discovered On-Chain transaction in mempool: {{.Amount}} sats
      Fee: {{.TotalFees}} sats

      Outputs:
      {{range .Outputs}}- {{.Amount}} sats to {{.Address}} ({{.OutputType}}{{if .IsOurAddress}}, ours{{end}})
      {{end}}
      TxID: {{.TxHash}}
      Raw TX: {{.RawTxHex}}
    on_chain_confirmed_event: |-
      üîó Confirmed On-Chain transaction: {{.Amount}} sats
      Fee: {{.TotalFees}} sats

      TxID: {{.TxHash}}
    chain_sync_lost_event: "‚ö†Ô∏è Chain is out of sync since {{.Duration}}"
    chain_sync_restored_event: "‚úÖ Chain is back in sync after {{.Duration}}"
    channel_status_up_event: |-
      üü¢ Channel with {{.PeerAlias}} ({{.PeerPubkeyShort}}) is back online after {{.Duration}}
      Capacity {{.Capacity}} sats
    channel_status_down_event: |-
      üî¥ Channel with {{.PeerAlias}} ({{.PeerPubkeyShort}}) is down since {{.Duration}}
      Capacity {{.Capacity}} sats
    tls_cert_expiry_event: "‚ö†Ô∏è LND TLS certificate is expiring soon on {{.ExpiryDate}} (in {{.TimeUntilExpiry}})"
  formatting:
    locale: "en-US"  # Language for number formatting (e.g. "en-US" for English, "de-DE" for German)
  batching:
    enabled: false  # Enable batching of notifications
    flush_interval: "5s"  # How often to flush batched notifications (e.g., "5s", "1m", "30s")
    max_size: 10  # Maximum number of notifications to batch before flushing immediately

# Event settings (feature flags)
events:
  backup_events: true # Enable channel backup notifications (file attachment if supported for provider)
  channel_events: true # Enable channel events (open/close) notifications
  failed_htlc_events: true # Enable failed HTLC notifications
  forward_events: true # Enable payment forwarding notifications
  invoice_events: true # Enable invoice settled notifications
  keysend_events: true # Enable keysend notifications
  payment_events: true # Enable outgoing payment succeeded notifications
  rebalancing_events: true # Enable rebalancing succeeded notifications
  status_events: true # Enable status change notifications (startup/shutdown)
  on_chain_events: true # Enable on-chain transaction notifications
  chain_sync_events: true # Enable chain sync status notifications (lost sync/restored)
  channel_status_events: true # Enable channel status notifications (channel up/down)
  tls_cert_expiry_events: true # Enable TLS certificate expiry notifications
  peer_events: false # Enable peer events (online/offline) notifications

# Event configuration (specific settings for each event type)
event_config:
  failed_htlc_event:
    min_amount: 0  # Minimum amount in sats to notify about failed HTLC event
  forward_event:
    min_amount: 0  # Minimum outgoing amount in sats to notify about forward event
  invoice_event:
    min_amount: 0  # Minimum amount in sats to notify about invoice event
  payment_event:
    min_amount: 0  # Minimum amount in sats to notify about payment succeeded event
  rebalancing_event:
    min_amount: 0  # Minimum amount in sats to notify about rebalancing
  on_chain_event:
    min_amount: 0  # Minimum amount in sats to notify about on-chain transaction
  chain_lost_event:
    threshold: 5m  # Duration of being out of sync before sending a notification
    warning_interval: 15m  # Interval between repeated warnings while still out of sync
  channel_status_event:
    min_downtime: 10m  # Minimum downtime duration before sending a channel down notification
